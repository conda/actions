---
name: CLA check
description: Reacts to new PRs and check if the contributor has previously signed the conda contributor license agreement (CLA).
inputs:
  token:
    description: The GitHub token (`statuses: write` and `pull_request: write`) used to create an authenticated client
    default: ${{ github.token }}
    required: true
  label:
    description: Label to apply to contributor's PR once CLA is singed
    required: true
  cla_repo:
    description: Upstream repository in which to create PR
    default: conda/infrastructure
  cla_fork:
    description: Fork of cla_repo in which to create branch
    default: conda-bot/infrastructure
  cla_token:
    description: Token for opening singee PR in the provided `cla_repo`
    required: true
  cla_path:
    description: Path to the CLA signees file within the provided `cla_repo`
    default: .clabot

runs:
  using: composite
  steps:
    # sha, labels, hasLabel
    - name: Get PR metadata
      id: pr
      uses: actions/github-script@v6
      with:
        script: |
          const { owner, repo, number } = context.issue;
          const pullRequest = await github.rest.pulls.get({
            owner,
            repo,
            pull_number: number,
          });
          console.log(pullRequest);

          const sha = pullRequest.data.head.sha;
          console.log(sha);
          core.setOutput('sha', sha);

          const labels = pullRequest.data.labels.map(label => label.name)
          console.log(labels);
          core.setOutput('labels', labels);

          const hasLabel = labels.includes('${{ inputs.label }}')
          console.log(hasLabel);
          core.setOutput('hasLabel', hasLabel);

    # commit status → pending
    - name: Set commit status with pending
      uses: conda/actions/set-commit-status@customize-cla-repo
      with:
        token: ${{ inputs.token }}
        context: CLA check
        state: pending
        description: Checking conda CLA...

    # contributors, hasSigned
    - name: Check if current actor has signed
      uses: actions/github-script@v6
      id: contributors
      with:
        github-token: ${{ inputs.token }}
        script: |
          console.log(context);
          const [owner, repo] = '${{ inputs.cla_repo }}'.split("/", 1);
          const getContributors = async () => {
            try {
              const results = (
                await github.rest.repos.getContent({
                  owner: owner,
                  repo: repo,
                  path: '${{ inputs.cla_path }}'
                })
              );
              return JSON.parse(Buffer.from(results.data.content, results.data.encoding).toString('utf-8')).contributors;
            } catch (err) {
              core.error(`Could not retrieve contributors, returning undefined. Reason: ${err}`)
              return undefined;
            }
          }
          const contributors = await getContributors();
          console.log(contributors);
          core.setOutput('contributors', contributors);

          const pull_request = (context.payload.issue || context.payload.pull_request || context.payload);
          const creator = pull_request.user.login;
          console.log(creator);

          const hasSigned = contributors.includes(creator);
          console.log(hasSigned);
          core.setOutput('hasSigned', hasSigned);

    # add [cla-signed] label if actor has already signed
    - name: Add label
      uses: actions-ecosystem/action-add-labels@v1.1.0
      if: steps.contributors.outputs.hasSigned == 'true' && steps.pr.outputs.hasLabel == 'false'
      with:
        github_token: ${{ inputs.token }}
        labels: ${{ inputs.label }}

    # remove [cla-signed] label if actor has not signed yet
    - name: Remove label
      uses: actions-ecosystem/action-remove-labels@v1.3.0
      if: steps.contributors.outputs.hasSigned == 'false' && steps.pr.outputs.hasLabel == 'true'
      with:
        github_token: ${{ inputs.token }}
        labels: ${{ inputs.label }}

    # checkout cla_repo to update cla_path
    - uses: actions/checkout@v3
      if: steps.contributors.outputs.hasSigned == 'false'
      with:
        repository: ${{ inputs.cla_repo }}

    # update cla_path
    - shell: python
      if: steps.contributors.outputs.hasSigned == 'false'
      run: |
        import json
        from pathlib import Path

        path = Path("${{ inputs.cla_path }}")
        signees = json.loads(path.read_text())
        signees["contributors"].append("${{ github.actor }}")
        signees["contributors"].sort()
        path.write_text(json.dumps(signees))

    # create PR
    - uses: peter-evans/create-pull-request@v4
      id: cla-pr
      if: steps.contributors.outputs.hasSigned == 'false'
      with:
        push-to-fork: ${{ inputs.cla_fork }}
        token: ${{ inputs.cla_token }}
        branch: cla-${{ github.actor }}
        commit-message: Adding CLA singee ${{ github.actor }}
        title: Adding CLA singee ${{ github.actor }}
        body: |
          Adding CLA signee @${{ github.actor }}

          Xref ${{ github.event.pull_request.url }}

    # create sticky comment if not signed
    - name: Create comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: steps.contributors.outputs.hasSigned == 'false'
      with:
        number: context.issue.number
        message: |
          We require contributors to sign our [Contributor License Agreement](https://conda.io/en/latest/contributing.html#conda-contributor-license-agreement) and we don't have one on file for @${{ github.event.pull_request.user.login }}.

          In order for us to review and merge your code, please e-sign the [Contributor License Agreement PDF](https://conda.io/en/latest/contributing.html#conda-contributor-license-agreement). We then need to manually verify your signature, merge the PR (${{ steps.cla-pr.outputs.pull-request-url }}), and ping the bot to refresh the PR.
        GITHUB_TOKEN: ${{ inputs.token }}

    # commit status → error
    - name: Set commit status to error
      if: steps.contributors.outputs.hasSigned == 'false'
      uses: conda/actions/set-commit-status@customize-cla-repo
      with:
        token: ${{ inputs.token }}
        context: CLA check
        state: error
        description: Please follow the details link to sign the conda CLA. →
        target_url: https://conda.io/en/latest/contributing.html#conda-contributor-license-agreement

    # commit status → success
    - name: Set commit status to success
      if: steps.contributors.outputs.hasSigned == 'true'
      uses: conda/actions/set-commit-status@customize-cla-repo
      with:
        token: ${{ inputs.token }}
        context: CLA check
        state: success
        description: CLA signed, thank you!

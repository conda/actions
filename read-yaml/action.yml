name: Read URL YAML
description: Reads in YAML file from URL.
author: Anaconda Inc.
inputs:
  path:
    description: Local path (or remote URL) to YAML file to read.
    required: true
  scopes:
    description: Path of keys to the value to extract from file (e.g. foo.bar).
    required: false
# cannot set outputs since they are dynamic based on the scopes value
# outputs:
#   data:
#     description: Data read from YAML file.
#     value: ${{ steps.read_yaml.outputs.data }}
runs:
  using: composite
  steps:
    - uses: actions/setup-node@v2
      with:
        node-version: 16
    - run: npm install js-yaml axios
      shell: bash -l {0}
    - id: read_yaml
      uses: actions/github-script@v5
      with:
        script: |
          const yaml = require('js-yaml');
          const axios = require('axios');
          const fs = require('fs');

          // borrowed from https://github.com/EndBug/label-sync/blob/main/src/index.ts
          function isUrl(str) {
            const pattern = new RegExp(
              '^(https?:\\/\\/)?' + // protocol
                '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' + // domain name
                '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
                '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + // port and path
                '(\\?[;&a-z\\d%_.~+=-]*)?' + // query string
                '(\\#[-a-z\\d_]*)?$',
              'i'
            ); // fragment locator
            return !!pattern.test(str);
          }

          // borrowed from https://github.com/EndBug/label-sync/blob/main/src/index.ts
          async function readUrl(url) {
            // attempt to read remotely
            try {
              return yaml.load((await axios.get(url)).data);
            } catch (err) {
              throw new Error(`Failed to fetch ${url} (${err.message})`);
            }
          }

          function readPath(path) {
            // attempt to read locally
            try {
              return yaml.load(fs.readFileSync(path, { encoding: 'utf-8' }));
            } catch (err) {
              throw new Error(`Failed to read ${path} (${err.message})`);
            }
          }

          async function readYaml(path) {
            if (isUrl(path)) {
              // looks like URL, fallback to path
              try {
                return await readUrl(path);
              } catch (err) {
                try {
                  return readPath(path);
                } catch (_) {
                  // squash this error
                }
                throw err
              }
            } else {
              // looks like path, fallback to URL
              try {
                return readPath(path);
              } catch (err) {
                try {
                  return await readUrl(`https://raw.githubusercontent.com/${context.repo.owner}/${context.repo.repo}/${context.sha}/${path}`);
                } catch (_) {
                  // squash this error
                }
                throw err
              }
            }
          }

          async function main() {
            const path = "${{ inputs.path }}";
            const data = await readYaml(path);

            const scopes = yaml.load(`${{ inputs.scopes }}`.trim() || "{}");
            if (!Object.keys(scopes).length) {
              core.info("loading \u001b[36;1mYAML\u001b[m as \u001b[36;1mscopes\u001b[m");
              core.setOutput("scopes", data);
            } else {
              for (const scope in scopes) {
                core.info(`loading \u001b[36;1m${scopes[scope]}\u001b[m as \u001b[36;1m${scope}\u001b[m ("${value.split(/\r?\n/)[0].slice(0, 10)}...")`);
                let value = data;
                try {
                  for (const key of scopes[scope].split('.'))
                    value = value instanceof Array ? value[parseInt(key)] : value[key];
                } catch (err) {
                  throw new Error(`Failed to read ${scopes[scope]} (${err.message})`);
                }
                core.setOutput(scope, value);
              }
            }
          }

          main().catch(err => {
            if (err instanceof Error) core.setFailed(err);
            else throw err;
          });

branding:
  icon: book-open
  color: green
